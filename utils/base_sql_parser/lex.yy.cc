
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 161
#define YY_END_OF_BUFFER 162
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[594] =
    {   0,
        0,    0,  162,  160,    1,    1,   64,  160,  125,  147,
      160,  111,  112,  114,  124,  113,  129,    4,  146,  156,
      155,  118,  115,  117,  130,  110,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  121,  131,  122,  123,  127,  126,  128,    1,  116,
        0,    2,    0,    0,    3,    0,  156,  156,  156,  151,
      120,  119,  152,    0,    0,  159,  159,  159,  159,  159,
       89,  159,  159,  159,  159,   72,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  100,  159,   84,   62,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,   78,  159,   67,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,   73,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,    2,    3,  156,    0,  157,  158,  124,  159,   58,
      159,   66,   60,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      146,  159,  159,  159,  159,   88,  159,  159,  159,  159,
      159,  107,  159,  159,  159,  159,  159,  159,  159,  159,

      159,   18,  159,   81,  159,  159,  159,  159,  159,  147,
      159,   64,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,   56,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,    8,  159,  159,  159,  159,
      159,  159,  123,  159,   65,  158,  159,  159,  159,  159,
      159,  159,   33,  159,  154,  159,   29,  159,  159,  159,
      159,  159,   24,  159,  159,  159,   61,  159,  159,    7,
      159,   90,  159,  159,  159,  159,  159,  159,   46,  159,
      159,  159,  159,  159,  159,  159,  159,  159,   44,   54,

       70,   57,  159,  159,  159,  159,  159,   63,  159,  159,
      159,  159,  159,  159,  140,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,   14,  159,  159,
      159,  159,   34,  153,   25,   15,  159,  159,  159,  159,
      159,  159,  159,  105,   87,  159,   98,  136,   26,   75,
       13,  159,  159,  132,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,   74,   21,  106,  159,   95,   50,  159,
      159,  159,   77,   69,  159,  159,   48,  159,  159,  159,
      159,  159,  159,  159,   52,  109,  159,  159,  159,  159,

      159,  159,  159,  159,   71,  150,  159,  159,  159,  159,
      159,  133,   41,  159,  159,  159,  159,  159,  159,   53,
      159,  159,  159,  159,   47,  159,  159,  159,   20,  159,
       76,  159,  135,  159,    5,  159,  159,  159,  159,   12,
      159,  159,   22,  159,  101,  159,  159,    6,   51,  159,
       85,    9,  159,  159,  159,  159,   55,  159,   49,   99,
      159,  159,  159,  149,  159,  102,  159,  108,  159,  159,
       10,  159,  159,   42,  159,  159,  159,  159,  159,  159,
       79,   11,   45,  159,  159,  159,  148,   94,   43,  159,
      159,  159,  159,   23,   68,  159,  159,  159,  104,   92,

      159,   19,  159,  159,  159,  159,  159,  159,   80,  159,
      159,  139,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,   30,  159,  159,  159,  159,   39,   27,
      103,   59,  159,  159,   37,   38,  159,  159,  159,  159,
      159,  159,  159,  137,  159,  159,   16,  159,  159,   31,
       32,  159,  159,  159,  159,  142,   91,   40,   86,  159,
      159,   17,  159,   65,  159,  159,  159,  138,  159,   82,
       28,  159,  159,  145,  159,   97,   35,   36,   96,   93,
      143,  159,  159,  159,  159,  159,  134,  141,  159,  144,
      159,   83,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,    1,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[599] =
    {   0,
        0,    0,  176, 2618,   82,   84,  155,   83, 2618, 2618,
       81, 2618, 2618, 2618, 2618, 2618, 2618,  140, 2618,   75,
     2618,   74, 2618,   76, 2618, 2618,  126,  101,   90,  193,
      103,  178,  102,   89,  203,  110,   92,  211,  200,  251,
      263,  157,   91,  273,  282,  348,  325,  266,  173,  258,
      168, 2618, 2618, 2618, 2618, 2618, 2618, 2618,  100, 2618,
       86, 2618,  103,  107, 2618,  114,  139,  129,  109, 2618,
      122, 2618, 2618,  129,    0,  176,  338,  180,  339,  343,
      351,  242,  369,  284,  366,  188,  346,  376,  409,  300,
      406,  413,  414,  268,  423,  418,  425,  438,  463,  443,

      445,  453,  484,  492,  476,  454,  191,  491,  502,  315,
      495,  488,  503,  528,  531,  539,  542,  556,  540,  563,
      565,  526,  541,  577,  564,  573,  630,  572,  581,  597,
      601,  608,  609,  633,  646,  594,  647,  612,  672,  611,
      649,  684,  657,  677,  688,  698,  702,  703,  680,  718,
      713,  122,  139,  113,  102, 2618,    0,  619,  723,  622,
      734,  733,  735,  749,  754,  756,  757,  758,  766,  769,
      761,  765,  770,  789,  800,  807,  825,  820,  812,  788,
      836,  838,  837,  849,  845,  841,  856,  852,  857,  859,
      866,  873,  876,  880,  877,  881,  888,  896,  891,  907,

      918,  932,  922,  911,  936,  927,  948,  952,  949,  953,
      960,  963,  974,  978,  983,  979,  990,  987, 1010, 1013,
     1015, 1020, 1012, 1024,  988, 1035, 1044, 1046, 1047, 1049,
     1056,  991, 1061, 1075, 1076, 1078, 1077, 1080, 1085, 1087,
     1089, 1090, 1105, 1117, 1109, 1116, 1119, 1130, 1120, 1152,
     1121, 1150, 1160, 1161, 2618,    0, 1162, 1163, 1164, 1176,
     1183, 1186, 1190, 1201, 1191, 1199, 1213, 1217, 1230, 1221,
     1222, 1232, 1231, 1234, 1243, 1246, 1257, 1254, 1262, 1258,
     1267, 1266, 1270, 1285, 1293, 1295, 1306, 1307, 1297, 1310,
     1317, 1318, 1332, 1333, 1334, 1336, 1337, 1349, 1345, 1348,

     1350, 1357, 1373, 1374, 1376, 1385, 1383, 1381, 1398, 1386,
     1388, 1412, 1410, 1422, 1413, 1423, 1424, 1426, 1431, 1434,
     1453, 1454, 1463, 1461, 1464, 1468, 1481, 1465, 1473, 1484,
     1491, 1492, 1495, 1500, 1505, 1517, 1514, 1526, 1522, 1531,
     1529, 1536, 1534, 1539, 1548, 1561, 1559, 1562, 1570, 1571,
     1573, 1583, 1585, 1590, 1595, 1592, 1599, 1600, 1603, 1604,
     1615, 1616, 1618, 1607, 1634, 1646, 1623, 1653, 1654, 1665,
     1668, 1675, 1677, 1686, 1687, 1688, 1689, 1690, 1691, 1698,
     1699, 1706, 1711, 1714, 1718, 1721, 1726, 1729, 1728, 1730,
     1737, 1738, 1745, 1742, 1758, 1759, 1760, 1761, 1762, 1774,

     1784, 1789, 1785, 1796, 1793, 1797, 1805, 1816, 1821, 1826,
     1824, 1825, 1828, 1836, 1837, 1838, 1853, 1854, 1857, 1856,
     1874, 1875, 1873, 1882, 1885, 1890, 1898, 1901, 1905, 1908,
     1910, 1912, 1913, 1934, 1930, 1932, 1935, 1933, 1950, 1946,
     1955, 1964, 1963, 1967, 1966, 1977, 1979, 1968, 1986, 1988,
     1989, 1991, 1998, 2000, 2003, 2010, 2011, 2014, 2018, 2019,
     2028, 2021, 2031, 2042, 2046, 2045, 2047, 2050, 2068, 2063,
     2070, 2077, 2073, 2078, 2082, 2089, 2081, 2099, 2102, 2103,
     2106, 2107, 2114, 2115, 2118, 2123, 2127, 2130, 2138, 2142,
     2143, 2146, 2153, 2154, 2156, 2158, 2167, 2175, 2163, 2174,

     2179, 2182, 2183, 2184, 2187, 2194, 2198, 2205, 2206, 2210,
     2219, 2215, 2223, 2235, 2228, 2237, 2246, 2257, 2255, 2258,
     2259, 2266, 2269, 2273, 2278, 2286, 2288, 2298, 2290, 2309,
     2310, 2319, 2321, 2322, 2329, 2330, 2333, 2342, 2344, 2347,
     2345, 2346, 2355, 2360, 2363, 2368, 2378, 2379, 2380, 2388,
     2392, 2399, 2400, 2402, 2411, 2403, 2415, 2419, 2420, 2427,
     2423, 2431, 2432, 2440, 2442, 2444, 2452, 2451, 2456, 2454,
     2463, 2478, 2468, 2473, 2482, 2480, 2483, 2485, 2490, 2492,
     2493, 2494, 2495, 2504, 2505, 2513, 2515, 2525, 2528, 2527,
     2530, 2529, 2618, 2604, 2608, 2611,  105, 2613

    } ;

static const flex_int16_t yy_def[599] =
    {   0,
      593,    1,  593,  593,  593,  593,  593,  594,  593,  593,
      595,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      594,  593,  594,  595,  593,  595,  593,  593,  593,  593,
      593,  593,  593,  593,  597,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  594,  595,  593,  593,  593,  598,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  593,  598,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,    0,  593,  593,  593,  593,  593

    } ;

static const flex_int16_t yy_nxt[2702] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   43,   52,
       53,   54,   55,   43,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   43,
       56,   57,   58,   59,   59,   59,   59,   62,   65,   68,
       62,   69,   70,   71,   60,   72,   73,   74,   74,   74,

       74,   59,   59,   75,   75,   75,   75,  152,  157,   74,
       74,   74,  105,   87,   65,   75,   75,   75,   74,  112,
       88,  153,  255,   68,   75,   69,   62,   89,   83,  154,
       90,   66,   84,   63,   74,   85,   63,   97,  156,   98,
       75,  155,  104,  105,   87,  154,   65,  111,   86,   99,
      112,   88,   77,   63,   78,   67,   67,   66,   89,   83,
       79,   90,   80,   84,   66,   74,   85,   81,   97,   82,
       98,   75,   63,  104,   60,  593,   74,  593,  111,   86,
       99,   74,   75,   77,   74,   78,   74,   75,   74,   66,
       75,   79,   75,   80,   75,  151,   74,  126,   81,   74,

       82,   74,   75,  147,  148,   75,  593,   75,   74,  100,
      149,   74,  101,  593,   75,  102,   91,   75,  103,   74,
       92,  593,  159,  593,   93,   75,  151,  116,  126,  106,
       94,  107,  108,   95,  147,  148,   96,  117,  113,  109,
      100,  149,  114,  101,  110,  593,  102,   91,  115,  103,
       74,   92,  593,  159,  593,   93,   75,  593,  116,   74,
      106,   94,  107,  108,   95,   75,   74,   96,  117,  113,
      109,   74,   75,  114,   74,  110,   74,   75,  593,  115,
       75,   74,   75,  593,  164,  118,  593,   75,  119,  145,
       74,  121,   74,  593,  120,  150,   75,  146,   75,  122,

      127,  123,  593,  124,  128,  131,  125,  129,   74,  132,
      130,  182,  133,  167,   75,  164,  118,  134,  593,  119,
      145,  593,  121,   74,  135,  120,  150,  174,  146,   75,
      122,  127,  123,   74,  124,  128,  131,  125,  129,   75,
      132,  130,  182,  133,  167,  593,   74,   74,  134,  593,
      593,   74,   75,   75,   74,  135,   74,   75,  174,   74,
       75,  142,   75,  143,  158,   75,  144,  593,  593,  162,
      593,  136,  593,  160,   74,  137,  163,   74,  138,  139,
       75,  161,  593,   75,   74,  140,  593,  169,  141,  593,
       75,  593,  142,  593,  143,  158,  593,  144,  165,  170,

      162,  593,  136,  168,  160,  593,  137,  163,  593,  138,
      139,  166,  161,  593,   74,  593,  140,   74,  169,  141,
       75,   74,   74,   75,  593,  593,   74,   75,   75,  165,
      170,   74,   75,   74,  168,  593,  593,   75,  176,   75,
      593,  177,  166,  171,  172,  173,   74,  178,  175,  593,
      593,   74,   75,   74,  179,  180,  184,   75,  181,   75,
      183,   74,   74,  593,  186,  593,  185,   75,   75,  176,
      593,   74,  177,  593,  171,  172,  173,   75,  178,  175,
      593,  197,  190,  189,   74,  179,  180,  184,  191,  181,
       75,  183,   74,  192,  187,  186,   74,  185,   75,   74,

       74,  188,   75,   74,  593,   75,   75,  593,  593,   75,
       74,   74,  197,  190,  189,  194,   75,   75,  593,  191,
      196,  193,  593,  593,  192,  187,  203,  198,  199,  195,
      593,  205,  188,  593,   74,  204,   74,  593,  200,   74,
       75,  593,   75,  201,  202,   75,  194,   74,   74,   74,
       74,  196,  193,   75,   75,   75,   75,  203,  198,  199,
      195,  206,  205,  207,   74,  209,  204,  208,  210,  200,
       75,   74,   74,   74,  201,  202,  593,   75,   75,   75,
       74,   74,  212,  215,  593,   74,   75,   75,  593,   74,
      211,   75,  206,  214,  207,   75,  209,  213,  208,  210,

      593,  226,   74,  216,  218,   74,  217,  593,   75,   74,
      593,   75,  227,  212,  215,   75,   74,   74,  236,   74,
       74,  211,   75,   75,  214,   75,   75,   74,  213,  593,
       74,  228,  226,   75,  216,  218,   75,  217,   74,  239,
      593,   74,  230,  227,   75,  229,  233,   75,  231,  236,
      232,  593,  593,  219,   74,   74,  234,   74,  220,  221,
       75,   75,  228,   75,  222,   74,  223,  593,  224,  235,
      239,   75,  242,  230,  225,  593,  229,  233,  593,  231,
       74,  232,  237,  245,  219,   74,   75,  234,   74,  220,
      221,   75,   74,  238,   75,  222,   74,  223,   75,  224,

      235,  593,   75,  242,  246,  225,   74,  240,  241,  243,
       74,   74,   75,  237,  245,  244,   75,   75,  593,  593,
      252,   74,  247,  593,  238,  249,   74,   75,  248,  250,
      593,   74,   75,  593,  593,  246,  254,   75,  240,  241,
      243,   74,   74,   74,  593,  251,  244,   75,   75,   75,
      257,  252,  593,  247,  593,  593,  249,   74,  253,  248,
      250,  258,   74,   75,   74,   74,   74,  254,   75,   74,
       75,   75,   75,   74,   74,   75,  251,   74,   74,   75,
       75,  257,  263,   75,   75,  260,  259,  593,  262,  253,
      593,  264,  258,  265,  593,  593,   74,   74,  593,  593,

      269,  261,   75,   75,  268,  266,  593,  593,   74,  267,
      593,  270,  271,  263,   75,   74,  260,  259,  593,  262,
       74,   75,  264,  272,  265,  593,   75,  273,   74,  593,
      278,  269,  261,   74,   75,  268,  266,  277,  274,   75,
      267,  593,  270,  271,   74,   74,   74,  276,  275,   74,
       75,   75,   75,   74,  272,   75,  593,   74,  273,   75,
       74,  278,  279,   75,   74,   74,   75,   74,  277,  274,
       75,   75,  282,   75,   74,  280,  593,  593,  276,  275,
       75,   74,  286,  281,   74,   74,  284,   75,   74,   74,
       75,   75,  593,  279,   75,   75,   74,  283,  285,   74,

      288,  593,   75,  282,   74,   75,  280,  287,  593,  593,
       75,  289,  292,  286,  281,   74,  290,  284,  295,   74,
      291,   75,  593,  593,  293,   75,   74,  593,  283,  285,
       74,  288,   75,  294,  296,   74,   75,  593,  287,  593,
       74,   75,  289,  292,   74,  297,   75,  290,  593,  295,
       75,  291,  593,  593,  302,  293,   74,   74,  300,  298,
       74,   74,   75,   75,  294,  296,   75,   75,   74,  299,
      593,   74,  593,  593,   75,  593,  297,   75,  301,  303,
      305,  304,   74,  593,  306,  302,   74,   74,   75,  300,
      298,   74,   75,   75,  593,   74,   74,   75,   74,   74,

      299,   75,   75,  593,   75,   75,  311,  593,  308,  301,
      303,  305,  304,  307,  310,  306,  593,  312,   74,  309,
       74,   74,  313,   74,   75,  321,   75,   75,   74,   75,
      593,  314,   74,  593,   75,  319,  315,  311,   75,  308,
      316,  593,  317,   74,  593,  310,  593,  318,  312,   75,
      309,  320,   74,  313,   74,   74,  321,   74,   75,  593,
       75,   75,  314,   75,   74,  322,  319,  315,  593,   74,
       75,  316,  593,  317,  325,   75,  326,  323,  318,  593,
      324,  593,  320,   74,   74,   74,   74,  327,   74,   75,
       75,   75,   75,   74,   75,   74,  322,   74,   74,   75,

      593,   75,  593,   75,   75,  325,  328,  326,  323,  329,
      593,  324,  331,   74,  335,  332,  330,   74,  327,   75,
      593,  334,  333,   75,   74,   74,  337,   74,   74,   74,
       75,   75,  341,   75,   75,   75,  336,  328,   74,  593,
      329,  593,  338,  331,   75,  335,  332,  330,  593,  593,
      593,  347,  334,  333,  339,  343,  340,  337,   74,  593,
       74,  593,  342,  341,   75,  344,   75,  336,   74,   74,
       74,   74,   74,  338,   75,   75,   75,   75,   75,  593,
      593,  593,  347,  348,   74,  339,  343,  340,  345,  352,
       75,   74,  346,  342,   74,  593,  344,   75,   74,   74,

       75,  349,  350,  351,   75,   75,  593,   74,  593,   74,
      355,  593,  354,   75,  348,   75,  593,  353,  593,  345,
      352,   74,  356,  346,  357,   74,  593,   75,  358,   74,
       74,   75,  349,  350,  351,   75,   75,  593,   74,   74,
       74,  355,   74,  354,   75,   75,   75,  593,   75,  593,
      593,   74,  359,  356,   74,  357,  363,   75,  593,  358,
       75,  360,   74,  361,  362,   74,   74,  593,   75,  365,
       74,   75,   75,  364,   74,   74,   75,  593,   74,  593,
       75,   75,  593,  359,   75,  369,  366,  363,  367,  593,
      593,  593,  360,   74,  361,  362,  370,  368,  371,   75,

      365,   74,  593,   74,  364,   74,  593,   75,  373,   75,
      593,   75,  372,  593,   74,   74,  369,  366,   74,  367,
       75,   75,  593,  593,   75,   74,   74,  370,  368,  371,
      593,   75,   75,  593,  593,  374,  376,  375,  377,  373,
       74,   74,   74,  372,   74,   74,   75,   75,   75,  593,
       75,   75,  378,   74,  380,  379,   74,   74,   74,   75,
      593,  593,   75,   75,   75,   74,  374,  376,  375,  377,
      593,   75,  593,  382,  381,  593,  384,  385,  386,  593,
      383,   74,   74,  378,   74,  380,  379,   75,   75,   74,
       75,   74,  593,   74,   74,   75,   74,   75,  388,   75,

       75,  593,   75,  593,  382,  381,   74,  384,  385,  386,
      392,  383,   75,  391,  593,  387,  389,  593,   74,  390,
       74,   74,  593,  394,   75,  393,   75,   75,  395,  388,
       74,   74,   74,  397,   74,  593,   75,   75,   75,   74,
       75,  392,   74,  593,  391,   75,  387,  389,   75,  401,
      390,  593,  396,  398,  394,  593,  393,  403,  593,  395,
      593,   74,   74,  399,  397,  593,  402,   75,   75,   74,
      400,   74,   74,   74,  593,   75,   74,   75,   75,   75,
      401,   74,   75,  396,  398,  407,  404,   75,  403,   74,
      406,  593,   74,  409,  399,   75,  405,  402,   75,   74,

       74,  400,  408,   74,  410,   75,   75,  411,   74,   75,
      593,  593,  593,   74,   75,  593,  407,  404,  413,   75,
      593,  406,   74,  593,  409,   74,  412,  405,   75,  414,
       74,   75,  593,  408,   74,  410,   75,   74,  411,   74,
       75,  416,   74,   75,   74,   75,  415,   74,   75,  413,
       75,  593,  593,   75,  593,  418,   74,  412,  420,  417,
      414,  419,   75,  423,  424,  593,  593,   74,  593,   74,
       74,  422,  416,   75,  421,   75,   75,  415,   74,   74,
      593,   74,  593,  593,   75,   75,  418,   75,  425,  420,
      417,   74,  419,   74,  423,  424,  593,   75,   74,   75,

       74,  593,  422,   74,   75,  421,   75,   74,   74,   75,
      593,   74,   74,   75,   75,   74,  427,   75,   75,  425,
      426,   75,  428,   74,   74,  430,   74,  431,  593,   75,
       75,   74,   75,  593,  429,  593,  593,   75,  437,  432,
      593,  436,   74,  435,  593,  593,  433,  427,   75,  593,
      440,  426,  593,  428,   74,  434,  430,  438,  431,  593,
       75,   74,   74,  593,  593,  429,  593,   75,   75,  437,
      432,  593,  436,   74,  435,  593,   74,  433,  593,   75,
      439,  440,   75,   74,  441,   74,  434,  593,  438,   75,
      442,   75,  443,  444,   74,   74,   74,   74,   74,   74,

       75,   75,   75,   75,   75,   75,   74,   74,  446,  593,
      593,  439,   75,   75,   74,  441,  445,  593,  447,   74,
       75,  442,   74,  443,  444,   75,   74,  449,   75,   74,
      450,  448,   75,  451,   74,   75,   74,   74,   74,  446,
       75,  593,   75,   75,   75,   74,   74,  445,  453,  447,
       74,   75,   75,   74,  593,  455,   75,  593,  449,   75,
      452,  450,  448,  454,  451,  456,   74,   74,   74,   74,
       74,  593,   75,   75,   75,   75,   75,  458,  460,  453,
      593,  593,   74,  593,  457,  593,  455,  459,   75,  463,
      593,  452,   74,   74,  454,  462,  456,   74,   75,   75,

      461,   74,  593,   75,   74,   74,  593,   75,  458,  460,
       75,   75,  464,   74,  593,  457,  466,  593,  459,   75,
      463,  593,  593,  468,   74,  465,  462,  467,  469,   74,
       75,  461,   74,   74,   74,   75,   74,  593,   75,   75,
       75,  593,   75,  464,   74,   74,   74,  466,  593,  593,
       75,   75,   75,  470,  468,  473,  465,  593,  467,  469,
      472,   74,   74,  471,   74,   74,  593,   75,   75,  474,
       75,   75,  477,  593,  593,  593,  475,  479,  593,  476,
      478,   74,   74,   74,  470,  593,  473,   75,   75,   75,
       74,  472,  480,   74,  471,  593,   75,  593,   74,   75,

      474,  481,  482,  477,   75,  484,   74,  475,  479,   74,
      476,  478,   75,   74,  483,   75,   74,  593,   74,   75,
       74,   74,   75,  480,   75,  485,   75,   75,  593,  593,
      593,  593,  481,  482,  486,  488,  484,  487,   74,  593,
       74,   74,   74,   74,   75,  483,   75,   75,   75,   75,
      593,  593,  593,  489,   74,  490,  485,  491,   74,  593,
       75,  593,  593,   74,   75,  486,  488,  494,  487,   75,
      493,   74,   74,  492,   74,   74,   74,   75,   75,  496,
       75,   75,   75,  593,  489,   74,  490,   74,  491,  497,
      498,   75,  495,   75,   74,  593,   74,   74,  494,   74,

       75,  493,   75,   75,  492,   75,   74,  593,   74,  593,
      496,   74,   75,  499,   75,  500,  501,   75,   74,   74,
      497,  498,   74,  495,   75,   75,   74,   74,   75,   74,
      593,  593,   75,   75,  505,   75,   74,  503,  502,   74,
      593,  506,   75,  593,  499,   75,  500,  501,  510,  504,
       74,  593,  507,   74,   74,   74,   75,  508,   74,   75,
       75,   75,  593,  593,   75,  505,  593,  511,  503,  502,
      513,   74,  506,  512,  593,  509,   74,   75,   74,  510,
      504,   74,   75,  507,   75,   74,   74,   75,  508,   74,
       74,   75,   75,  514,  515,   75,   75,   74,  511,  593,

      593,  513,  593,   75,  512,  518,  509,   74,  516,  517,
       74,   74,  519,   75,   74,   74,   75,   75,  520,  593,
       75,   75,   74,   74,  514,  515,   74,  522,   75,   75,
      593,   74,   75,  593,  523,   74,  518,   75,   74,  516,
      517,   75,  593,  519,   75,  521,   74,  593,  526,  520,
       74,   74,   75,  525,   74,  524,   75,   75,  522,  593,
       75,   74,   74,  593,   74,  523,   74,   75,   75,  527,
       75,   74,   75,  529,  528,   74,  521,   75,  593,  526,
      530,   75,   74,   74,  525,  531,  524,   74,   75,   75,
       74,   74,   74,   75,  593,   74,   75,   75,   75,  593,

      527,   75,   74,  593,  529,  528,   74,  535,   75,  532,
      534,  530,   75,   74,   74,  593,  531,  533,   74,   75,
       75,  537,  593,   74,   75,  539,  536,   74,  540,   75,
      538,   74,  593,   75,  593,  593,   74,   75,  535,  541,
      532,  534,   75,   74,  542,   74,  593,  543,  533,   75,
      593,   75,  537,  593,   74,  593,  539,  536,  593,  540,
       75,  538,  593,   74,  545,   74,   74,   74,  544,   75,
      541,   75,   75,   75,   74,  542,  593,   74,  543,  593,
       75,   74,  550,   75,  593,  546,   74,   75,  547,  593,
      549,  593,   75,  593,   74,  545,   74,  548,   74,  544,

       75,  551,   75,  593,   75,  593,   74,  593,  552,  554,
      593,  553,   75,  550,  556,  593,  546,   74,   74,  547,
      593,  549,  593,   75,   75,  593,  555,   74,  548,   74,
       74,  558,  551,   75,  557,   75,   75,   74,   74,  552,
      554,   74,  553,   75,   75,  556,  593,   75,  559,  560,
       74,  593,   74,   74,   74,   74,   75,  555,   75,   75,
       75,   75,  558,   74,  593,  557,  593,  593,   74,   75,
      561,   74,  565,  566,   75,  593,   74,   75,  593,  559,
      560,  564,   75,  593,  562,  593,   74,   74,   74,  567,
      563,  569,   75,   75,   75,  593,   74,  593,  593,  593,

       74,  561,   75,  565,  566,  568,   75,   74,   74,  593,
       74,   74,  564,   75,   75,  562,   75,   75,  571,   74,
      567,  563,  569,   74,  593,   75,  570,   74,   74,   75,
      572,   74,  593,   75,   75,   74,  568,   75,  575,   74,
       74,   75,  573,  593,  574,   75,   75,  577,   74,  571,
       74,  593,   74,  576,   75,  593,   75,  570,   75,   74,
       74,  572,   74,  593,   74,   75,   75,  593,   75,  575,
       75,   74,  593,  573,  578,  574,   74,   75,  577,  581,
      582,   74,   75,  579,  576,  580,   74,   75,   74,  593,
       74,   74,   75,   74,   75,  584,   75,   75,   74,   75,

       74,   74,   74,   74,   75,  578,   75,   75,   75,   75,
      581,  582,   74,   74,  579,  583,  580,  585,   75,   75,
      593,   74,  593,   74,  593,  593,  584,   75,  586,   75,
      588,  587,  589,   74,  593,   74,   74,   74,   74,   75,
      590,   75,   75,   75,   75,  593,  583,  593,  585,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  586,
      593,  588,  587,  589,  591,  593,  593,  593,  593,  593,
      593,  590,  592,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  591,  593,  593,  593,  593,

      593,  593,  593,  592,   61,   61,   61,   61,   64,   64,
       64,   64,   76,   76,   76,  256,  256,    3,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,

      593
    } ;

static const flex_int16_t yy_chk[2702] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    6,    6,    8,   11,   20,
       61,   20,   22,   22,   22,   24,   24,   34,   29,   43,

       37,   59,   59,   34,   29,   43,   37,   63,  597,   28,
       33,   31,   34,   29,   64,   28,   33,   31,   36,   37,
       29,   66,  155,   69,   36,   69,  152,   29,   28,  154,
       29,   11,   28,    8,   27,   28,   61,   31,   74,   31,
       27,   71,   33,   34,   29,   68,  153,   36,   28,   31,
       37,   29,   27,   63,   27,   67,   18,   64,   29,   28,
       27,   29,   27,   28,   66,   42,   28,   27,   31,   27,
       31,   42,  152,   33,    7,    3,   51,    0,   36,   28,
       31,   49,   51,   27,   76,   27,   32,   49,   78,  153,
       76,   27,   32,   27,   78,   51,   86,   42,   27,  107,

       27,   30,   86,   49,   49,  107,    0,   30,   39,   32,
       49,   35,   32,    0,   39,   32,   30,   35,   32,   38,
       30,    0,   78,    0,   30,   38,   51,   39,   42,   35,
       30,   35,   35,   30,   49,   49,   30,   39,   38,   35,
       32,   49,   38,   32,   35,    0,   32,   30,   38,   32,
       82,   30,    0,   78,    0,   30,   82,    0,   39,   40,
       35,   30,   35,   35,   30,   40,   50,   30,   39,   38,
       35,   41,   50,   38,   48,   35,   94,   41,    0,   38,
       48,   44,   94,    0,   82,   40,    0,   44,   40,   48,
       45,   41,   84,    0,   40,   50,   45,   48,   84,   41,

       44,   41,    0,   41,   44,   45,   41,   44,   90,   45,
       44,   94,   45,   84,   90,   82,   40,   45,    0,   40,
       48,    0,   41,  110,   45,   40,   50,   90,   48,  110,
       41,   44,   41,   47,   41,   44,   45,   41,   44,   47,
       45,   44,   94,   45,   84,    0,   77,   79,   45,    0,
        0,   80,   77,   79,   87,   45,   46,   80,   90,   81,
       87,   47,   46,   47,   77,   81,   47,    0,    0,   80,
        0,   46,    0,   79,   85,   46,   81,   83,   46,   46,
       85,   79,    0,   83,   88,   46,    0,   87,   46,    0,
       88,    0,   47,    0,   47,   77,    0,   47,   83,   88,

       80,    0,   46,   85,   79,    0,   46,   81,    0,   46,
       46,   83,   79,    0,   91,    0,   46,   89,   87,   46,
       91,   92,   93,   89,    0,    0,   96,   92,   93,   83,
       88,   95,   96,   97,   85,    0,    0,   95,   92,   97,
        0,   92,   83,   89,   89,   89,   98,   92,   91,    0,
        0,  100,   98,  101,   92,   93,   96,  100,   93,  101,
       95,  102,  106,    0,   98,    0,   97,  102,  106,   92,
        0,   99,   92,    0,   89,   89,   89,   99,   92,   91,
        0,  106,  101,  100,  105,   92,   93,   96,  101,   93,
      105,   95,  103,  102,   99,   98,  112,   97,  103,  108,

      104,   99,  112,  111,    0,  108,  104,    0,    0,  111,
      109,  113,  106,  101,  100,  104,  109,  113,    0,  101,
      105,  103,    0,    0,  102,   99,  111,  108,  109,  104,
        0,  113,   99,    0,  122,  112,  114,    0,  109,  115,
      122,    0,  114,  109,  109,  115,  104,  116,  119,  123,
      117,  105,  103,  116,  119,  123,  117,  111,  108,  109,
      104,  114,  113,  114,  118,  116,  112,  115,  117,  109,
      118,  120,  125,  121,  109,  109,    0,  120,  125,  121,
      128,  126,  119,  123,    0,  124,  128,  126,    0,  129,
      118,  124,  114,  121,  114,  129,  116,  120,  115,  117,

        0,  128,  136,  124,  126,  130,  125,    0,  136,  131,
        0,  130,  129,  119,  123,  131,  132,  133,  136,  140,
      138,  118,  132,  133,  121,  140,  138,  158,  120,    0,
      160,  130,  128,  158,  124,  126,  160,  125,  127,  138,
        0,  134,  132,  129,  127,  131,  133,  134,  132,  136,
      132,    0,    0,  127,  135,  137,  134,  141,  127,  127,
      135,  137,  130,  141,  127,  143,  127,    0,  127,  135,
      138,  143,  141,  132,  127,    0,  131,  133,    0,  132,
      139,  132,  137,  143,  127,  144,  139,  134,  149,  127,
      127,  144,  142,  137,  149,  127,  145,  127,  142,  127,

      135,    0,  145,  141,  144,  127,  146,  139,  139,  142,
      147,  148,  146,  137,  143,  142,  147,  148,    0,    0,
      149,  151,  145,    0,  137,  146,  150,  151,  145,  147,
        0,  159,  150,    0,    0,  144,  151,  159,  139,  139,
      142,  162,  161,  163,    0,  148,  142,  162,  161,  163,
      159,  149,    0,  145,    0,    0,  146,  164,  150,  145,
      147,  161,  165,  164,  166,  167,  168,  151,  165,  171,
      166,  167,  168,  172,  169,  171,  148,  170,  173,  172,
      169,  159,  168,  170,  173,  165,  164,    0,  167,  150,
        0,  169,  161,  169,    0,    0,  180,  174,    0,    0,

      172,  166,  180,  174,  171,  170,    0,    0,  175,  170,
        0,  173,  174,  168,  175,  176,  165,  164,    0,  167,
      179,  176,  169,  175,  169,    0,  179,  175,  178,    0,
      180,  172,  166,  177,  178,  171,  170,  179,  176,  177,
      170,    0,  173,  174,  181,  183,  182,  178,  177,  186,
      181,  183,  182,  185,  175,  186,    0,  184,  175,  185,
      188,  180,  182,  184,  187,  189,  188,  190,  179,  176,
      187,  189,  185,  190,  191,  183,    0,    0,  178,  177,
      191,  192,  190,  184,  193,  195,  188,  192,  194,  196,
      193,  195,    0,  182,  194,  196,  197,  187,  189,  199,

      192,    0,  197,  185,  198,  199,  183,  191,    0,    0,
      198,  193,  196,  190,  184,  200,  194,  188,  199,  204,
      195,  200,    0,    0,  197,  204,  201,    0,  187,  189,
      203,  192,  201,  198,  200,  206,  203,    0,  191,    0,
      202,  206,  193,  196,  205,  201,  202,  194,    0,  199,
      205,  195,    0,    0,  206,  197,  207,  209,  203,  202,
      208,  210,  207,  209,  198,  200,  208,  210,  211,  202,
        0,  212,    0,    0,  211,    0,  201,  212,  205,  207,
      209,  208,  213,    0,  210,  206,  214,  216,  213,  203,
      202,  215,  214,  216,    0,  218,  225,  215,  217,  232,

      202,  218,  225,    0,  217,  232,  216,    0,  213,  205,
      207,  209,  208,  211,  215,  210,    0,  217,  219,  214,
      223,  220,  218,  221,  219,  225,  223,  220,  222,  221,
        0,  218,  224,    0,  222,  223,  219,  216,  224,  213,
      220,    0,  221,  226,    0,  215,    0,  222,  217,  226,
      214,  224,  227,  218,  228,  229,  225,  230,  227,    0,
      228,  229,  218,  230,  231,  226,  223,  219,    0,  233,
      231,  220,    0,  221,  229,  233,  230,  227,  222,    0,
      228,    0,  224,  234,  235,  237,  236,  231,  238,  234,
      235,  237,  236,  239,  238,  240,  226,  241,  242,  239,

        0,  240,    0,  241,  242,  229,  233,  230,  227,  234,
        0,  228,  236,  243,  240,  237,  235,  245,  231,  243,
        0,  239,  238,  245,  246,  244,  242,  247,  249,  251,
      246,  244,  245,  247,  249,  251,  241,  233,  248,    0,
      234,    0,  243,  236,  248,  240,  237,  235,    0,    0,
        0,  251,  239,  238,  244,  248,  244,  242,  252,    0,
      250,    0,  247,  245,  252,  249,  250,  241,  253,  254,
      257,  258,  259,  243,  253,  254,  257,  258,  259,    0,
        0,    0,  251,  252,  260,  244,  248,  244,  250,  259,
      260,  261,  250,  247,  262,    0,  249,  261,  263,  265,

      262,  254,  257,  258,  263,  265,    0,  266,    0,  264,
      261,    0,  260,  266,  252,  264,    0,  259,    0,  250,
      259,  267,  262,  250,  264,  268,    0,  267,  266,  270,
      271,  268,  254,  257,  258,  270,  271,    0,  269,  273,
      272,  261,  274,  260,  269,  273,  272,    0,  274,    0,
        0,  275,  268,  262,  276,  264,  272,  275,    0,  266,
      276,  269,  278,  270,  271,  277,  280,    0,  278,  274,
      279,  277,  280,  273,  282,  281,  279,    0,  283,    0,
      282,  281,    0,  268,  283,  278,  275,  272,  276,    0,
        0,    0,  269,  284,  270,  271,  279,  277,  281,  284,

      274,  285,    0,  286,  273,  289,    0,  285,  284,  286,
        0,  289,  283,    0,  287,  288,  278,  275,  290,  276,
      287,  288,    0,    0,  290,  291,  292,  279,  277,  281,
        0,  291,  292,    0,    0,  285,  287,  286,  288,  284,
      293,  294,  295,  283,  296,  297,  293,  294,  295,    0,
      296,  297,  290,  299,  292,  291,  300,  298,  301,  299,
        0,    0,  300,  298,  301,  302,  285,  287,  286,  288,
        0,  302,    0,  294,  293,    0,  296,  297,  298,    0,
      295,  303,  304,  290,  305,  292,  291,  303,  304,  308,
      305,  307,    0,  306,  310,  308,  311,  307,  304,  306,

      310,    0,  311,    0,  294,  293,  309,  296,  297,  298,
      307,  295,  309,  306,    0,  303,  304,    0,  313,  305,
      312,  315,    0,  310,  313,  309,  312,  315,  311,  304,
      314,  316,  317,  313,  318,    0,  314,  316,  317,  319,
      318,  307,  320,    0,  306,  319,  303,  304,  320,  318,
      305,    0,  312,  314,  310,    0,  309,  320,    0,  311,
        0,  321,  322,  316,  313,    0,  319,  321,  322,  324,
      317,  323,  325,  328,    0,  324,  326,  323,  325,  328,
      318,  329,  326,  312,  314,  324,  321,  329,  320,  327,
      323,    0,  330,  326,  316,  327,  322,  319,  330,  331,

      332,  317,  325,  333,  327,  331,  332,  329,  334,  333,
        0,    0,    0,  335,  334,    0,  324,  321,  331,  335,
        0,  323,  337,    0,  326,  336,  330,  322,  337,  332,
      339,  336,    0,  325,  338,  327,  339,  341,  329,  340,
      338,  336,  343,  341,  342,  340,  335,  344,  343,  331,
      342,    0,    0,  344,    0,  337,  345,  330,  339,  336,
      332,  338,  345,  342,  343,    0,    0,  347,    0,  346,
      348,  341,  336,  347,  340,  346,  348,  335,  349,  350,
        0,  351,    0,    0,  349,  350,  337,  351,  346,  339,
      336,  352,  338,  353,  342,  343,    0,  352,  354,  353,

      356,    0,  341,  355,  354,  340,  356,  357,  358,  355,
        0,  359,  360,  357,  358,  364,  353,  359,  360,  346,
      352,  364,  355,  361,  362,  357,  363,  358,    0,  361,
      362,  367,  363,    0,  356,    0,    0,  367,  364,  359,
        0,  363,  365,  362,    0,    0,  360,  353,  365,    0,
      367,  352,    0,  355,  366,  361,  357,  365,  358,    0,
      366,  368,  369,    0,    0,  356,    0,  368,  369,  364,
      359,    0,  363,  370,  362,    0,  371,  360,    0,  370,
      366,  367,  371,  372,  368,  373,  361,    0,  365,  372,
      369,  373,  370,  371,  374,  375,  376,  377,  378,  379,

      374,  375,  376,  377,  378,  379,  380,  381,  373,    0,
        0,  366,  380,  381,  382,  368,  372,    0,  377,  383,
      382,  369,  384,  370,  371,  383,  385,  380,  384,  386,
      381,  378,  385,  382,  387,  386,  389,  388,  390,  373,
      387,    0,  389,  388,  390,  391,  392,  372,  386,  377,
      394,  391,  392,  393,    0,  389,  394,    0,  380,  393,
      385,  381,  378,  388,  382,  390,  395,  396,  397,  398,
      399,    0,  395,  396,  397,  398,  399,  392,  394,  386,
        0,    0,  400,    0,  391,    0,  389,  393,  400,  399,
        0,  385,  401,  403,  388,  398,  390,  402,  401,  403,

      397,  405,    0,  402,  404,  406,    0,  405,  392,  394,
      404,  406,  400,  407,    0,  391,  402,    0,  393,  407,
      399,    0,    0,  404,  408,  401,  398,  403,  407,  409,
      408,  397,  411,  412,  410,  409,  413,    0,  411,  412,
      410,    0,  413,  400,  414,  415,  416,  402,    0,    0,
      414,  415,  416,  408,  404,  411,  401,    0,  403,  407,
      410,  417,  418,  409,  420,  419,    0,  417,  418,  413,
      420,  419,  416,    0,    0,    0,  414,  418,    0,  415,
      417,  423,  421,  422,  408,    0,  411,  423,  421,  422,
      424,  410,  419,  425,  409,    0,  424,    0,  426,  425,

      413,  421,  422,  416,  426,  424,  427,  414,  418,  428,
      415,  417,  427,  429,  423,  428,  430,    0,  431,  429,
      432,  433,  430,  419,  431,  426,  432,  433,    0,    0,
        0,    0,  421,  422,  427,  430,  424,  428,  435,    0,
      436,  438,  434,  437,  435,  423,  436,  438,  434,  437,
        0,    0,    0,  432,  440,  433,  426,  434,  439,    0,
      440,    0,    0,  441,  439,  427,  430,  438,  428,  441,
      437,  443,  442,  436,  445,  444,  448,  443,  442,  441,
      445,  444,  448,    0,  432,  446,  433,  447,  434,  442,
      444,  446,  439,  447,  449,    0,  450,  451,  438,  452,

      449,  437,  450,  451,  436,  452,  453,    0,  454,    0,
      441,  455,  453,  446,  454,  447,  450,  455,  456,  457,
      442,  444,  458,  439,  456,  457,  459,  460,  458,  462,
        0,    0,  459,  460,  456,  462,  461,  454,  453,  463,
        0,  456,  461,    0,  446,  463,  447,  450,  462,  455,
      464,    0,  456,  466,  465,  467,  464,  458,  468,  466,
      465,  467,    0,    0,  468,  456,    0,  463,  454,  453,
      467,  470,  456,  465,    0,  461,  469,  470,  471,  462,
      455,  473,  469,  456,  471,  472,  474,  473,  458,  477,
      475,  472,  474,  469,  470,  477,  475,  476,  463,    0,

        0,  467,    0,  476,  465,  475,  461,  478,  472,  473,
      479,  480,  476,  478,  481,  482,  479,  480,  477,    0,
      481,  482,  483,  484,  469,  470,  485,  479,  483,  484,
        0,  486,  485,    0,  480,  487,  475,  486,  488,  472,
      473,  487,    0,  476,  488,  478,  489,    0,  486,  477,
      490,  491,  489,  485,  492,  484,  490,  491,  479,    0,
      492,  493,  494,    0,  495,  480,  496,  493,  494,  490,
      495,  499,  496,  492,  491,  497,  478,  499,    0,  486,
      493,  497,  500,  498,  485,  496,  484,  501,  500,  498,
      502,  503,  504,  501,    0,  505,  502,  503,  504,    0,

      490,  505,  506,    0,  492,  491,  507,  503,  506,  497,
      501,  493,  507,  508,  509,    0,  496,  498,  510,  508,
      509,  505,    0,  512,  510,  507,  504,  511,  508,  512,
      506,  513,    0,  511,    0,    0,  515,  513,  503,  510,
      497,  501,  515,  514,  511,  516,    0,  513,  498,  514,
        0,  516,  505,    0,  517,    0,  507,  504,    0,  508,
      517,  506,    0,  519,  515,  518,  520,  521,  514,  519,
      510,  518,  520,  521,  522,  511,    0,  523,  513,    0,
      522,  524,  520,  523,    0,  516,  525,  524,  517,    0,
      519,    0,  525,    0,  526,  515,  527,  518,  529,  514,

      526,  521,  527,    0,  529,    0,  528,    0,  522,  525,
        0,  523,  528,  520,  527,    0,  516,  530,  531,  517,
        0,  519,    0,  530,  531,    0,  526,  532,  518,  533,
      534,  529,  521,  532,  528,  533,  534,  535,  536,  522,
      525,  537,  523,  535,  536,  527,    0,  537,  533,  534,
      538,    0,  539,  541,  542,  540,  538,  526,  539,  541,
      542,  540,  529,  543,    0,  528,    0,    0,  544,  543,
      537,  545,  541,  542,  544,    0,  546,  545,    0,  533,
      534,  540,  546,    0,  538,    0,  547,  548,  549,  543,
      539,  546,  547,  548,  549,    0,  550,    0,    0,    0,

      551,  537,  550,  541,  542,  545,  551,  552,  553,    0,
      554,  556,  540,  552,  553,  538,  554,  556,  549,  555,
      543,  539,  546,  557,    0,  555,  548,  558,  559,  557,
      552,  561,    0,  558,  559,  560,  545,  561,  555,  562,
      563,  560,  553,    0,  554,  562,  563,  561,  564,  549,
      565,    0,  566,  560,  564,    0,  565,  548,  566,  568,
      567,  552,  570,    0,  569,  568,  567,    0,  570,  555,
      569,  571,    0,  553,  563,  554,  573,  571,  561,  567,
      569,  574,  573,  565,  560,  566,  572,  574,  576,    0,
      575,  577,  572,  578,  576,  573,  575,  577,  579,  578,

      580,  581,  582,  583,  579,  563,  580,  581,  582,  583,
      567,  569,  584,  585,  565,  572,  566,  575,  584,  585,
        0,  586,    0,  587,    0,    0,  573,  586,  582,  587,
      584,  583,  585,  588,    0,  590,  589,  592,  591,  588,
      586,  590,  589,  592,  591,    0,  572,    0,  575,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  582,
        0,  584,  583,  585,  589,    0,    0,    0,    0,    0,
        0,  586,  591,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  589,    0,    0,    0,    0,

        0,    0,    0,  591,  594,  594,  594,  594,  595,  595,
      595,  595,  596,  596,  596,  598,  598,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,

      593
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[162] =
    {   0,
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../lex.l"
#line 3 "../lex.l"
#include <cstdio>
#include <string>



using namespace std;
//operate word
#define CREATE 		1
#define DROP 		2
#define USE 		3
#define INSERT		4
#define SELECT 		5
#define UPDATE		6
#define DELETE		7
#define ALTER		8
#define SHOW		9

//num type
#define TINY		10
#define SMALLINT	11
#define MEDIUMINT	12
#define INT 		13
#define	INTEGER		14
#define	BIGINT		15
#define	FLOAT		16
#define	DOUBLE		17
#define DECIMAL		18

//data type
#define DATE 		19
#define TIME		20
#define YEAR		21
#define DATETIME	22
#define	TIMESTAMP	23

//string type
#define CHAR		24
#define	VARCHAR		25
#define TINYBLOB	26
#define TINYTEXT	27
#define BLOB		28
#define TEXT 		29
#define MEDIUMBLOB	30
#define	MEDIUMTEXT	31
#define LONGBLOB	32
#define LONGTEXT	33


//other
#define DATABASE 	34
#define DATABASES	35
#define TABLE		36
#define TABLES		37
#define COLUMNS		38


#define INTO		39
#define VALUES		40
#define FROM 		41
#define WHERE		42
#define LIMIT		43
#define OFFSET		44
#define GROUP		45
#define HAVING		46
#define ORDER		47
#define UNION		48
#define JOIN		49
#define MODIFY		50


#define SET 		51
#define LIKE		52
#define ALL			53
#define DISTINCT	54


#define ASC			55
#define DESC		56
#define IS 			57
#define NLL			58
#define NOT 		59
#define NLL_EQUAL	60


#define AND			61
#define OR 			62
#define _DEFAULT_	63


#define INNER		64
#define LEFT		65
#define RIGHT		66
#define BY			67
#define TO 			68
#define FIRST		69
#define AFTER		70
#define CHANGE		71
#define INDEX		72
#define ON			73
#define UNIQUE		74
#define PRIMARY		75
#define KEY			76
#define TEMPORARY	77
#define AUTO_INCREMENT	78
#define IN 			79


//operator
#define L_BRACKET	80
#define R_BRACKET	81
#define EMPTY		82
#define COMMA		83
#define STAR		84
#define EQUAL		85
#define NOT_EQUAL	86
#define MORE		87
#define LESS		88
#define MORE_EQUAL	89
#define LESS_EQUAL	90
#define PERCENT_MARK	91
#define UNDERLINE	92
#define L_MID_BRACKET	93
#define R_MID_BRACKET	94
#define XOR			95
#define ADD			96
#define DOLLAR		97
#define STICK		98
#define L_BIG_BRACKET	99
#define R_BIG_BRACKET	100


#define _BEGIN_		101
#define START		102
#define TRANSACTION	103
#define	COMMIT		104
#define WORK		105
#define ROLLBACK	106
#define SAVEPOINT	107
#define RELEASE		108
#define READ		109
#define UNCOMMITTED	110
#define COMMITTED	111
#define REPEATABLE	112
#define SERIALIZABLE	113
#define	AUTOCOMMIT	114
#define DIV			115
#define MOD 		116
#define BETWEEN		117
#define REGEXP		118
#define	RLIKE		119
#define L_MOVE		120
#define R_MOVE		121
#define THEN		122
#define CASE		123

#define NUMBER		124
#define ID 			125
#define FUNCTION	126
#define SEMICOLON	127
#define SUB			128
#define QUESTION_MARK	129
#define BACKSLASH	130
#define STRING 		131
#define DOT			132

#define IGNORE		133
#define DUPLICATE	134
#define WHEN		135
#define END			136
#define AS 			137
#define ELSE 		138
#define CONSTRAIN 	139
#define FOREIGN		140
#define REFERENCES 	141
#define CASCADE 	142
#define GRANT 		143
#define PRIVILEGES 	144
#define IDENTIFIED 	145
#define WITH 		146
#define OPTION 		147
#define IF 			148
#define EXISTS 		149
#define RENAME 		150
#define DESCRIBE 	151
#define EXPLAIN 	152
#define VIEW 		153
#define FLUSH 		154
#define FOR 		155
#define REVOKE 		156
#define AT 			157


#define TAB_DOT_COL	158
#define OUTER 		159

#define GRANTS 		160



#define OTHER 		999


#line 1428 "lex.yy.cc"
#line 1429 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 212 "../lex.l"

#line 1563 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 594 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2618 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 213 "../lex.l"
{return EMPTY;}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 214 "../lex.l"
{return STRING;}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 215 "../lex.l"
{return STRING;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 216 "../lex.l"
{return DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 217 "../lex.l"
{return CREATE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 218 "../lex.l"
{return GRANTS;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 219 "../lex.l"
{return DROP;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 220 "../lex.l"
{return USE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 221 "../lex.l"
{return INSERT;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 222 "../lex.l"
{return SELECT;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 223 "../lex.l"
{return UPDATE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 224 "../lex.l"
{return DELETE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 225 "../lex.l"
{return ALTER;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 226 "../lex.l"
{return SHOW;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 228 "../lex.l"
{return TINY;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 229 "../lex.l"
{return SMALLINT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 230 "../lex.l"
{return MEDIUMINT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 231 "../lex.l"
{return INT;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 232 "../lex.l"
{return INTEGER;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 233 "../lex.l"
{return BIGINT;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 234 "../lex.l"
{return FLOAT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 235 "../lex.l"
{return DOUBLE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 236 "../lex.l"
{return DECIMAL;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 238 "../lex.l"
{return DATE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 239 "../lex.l"
{return TIME;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 240 "../lex.l"
{return YEAR;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 241 "../lex.l"
{return DATETIME;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 242 "../lex.l"
{return TIMESTAMP;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 245 "../lex.l"
{return CHAR;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 246 "../lex.l"
{return VARCHAR;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 247 "../lex.l"
{return TINYBLOB;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 248 "../lex.l"
{return TINYTEXT;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 249 "../lex.l"
{return BLOB;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 250 "../lex.l"
{return TEXT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 251 "../lex.l"
{return MEDIUMBLOB;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 252 "../lex.l"
{return MEDIUMTEXT;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 253 "../lex.l"
{return LONGBLOB;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 254 "../lex.l"
{return LONGTEXT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 257 "../lex.l"
{return DATABASE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 258 "../lex.l"
{return DATABASES;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 259 "../lex.l"
{return TABLE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 260 "../lex.l"
{return TABLES;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 261 "../lex.l"
{return COLUMNS;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 263 "../lex.l"
{return INTO;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 264 "../lex.l"
{return VALUES;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 265 "../lex.l"
{return FROM;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 266 "../lex.l"
{return WHERE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 267 "../lex.l"
{return LIMIT;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 268 "../lex.l"
{return OFFSET;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 269 "../lex.l"
{return GROUP;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 270 "../lex.l"
{return HAVING;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 271 "../lex.l"
{return ORDER;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 272 "../lex.l"
{return UNION;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 273 "../lex.l"
{return JOIN;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 274 "../lex.l"
{return MODIFY;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 276 "../lex.l"
{return SET;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 277 "../lex.l"
{return LIKE;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 278 "../lex.l"
{return ALL;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 279 "../lex.l"
{return DISTINCT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 282 "../lex.l"
{return ASC;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 283 "../lex.l"
{return DESC;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 284 "../lex.l"
{return IS;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 285 "../lex.l"
{return NLL;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 286 "../lex.l"
{return NOT;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 287 "../lex.l"
{return NLL_EQUAL;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 289 "../lex.l"
{return AND;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 290 "../lex.l"
{return OR;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 291 "../lex.l"
{return _DEFAULT_;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 293 "../lex.l"
{return INNER;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 294 "../lex.l"
{return LEFT;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 295 "../lex.l"
{return RIGHT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 296 "../lex.l"
{return BY;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 297 "../lex.l"
{return TO;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 298 "../lex.l"
{return FIRST;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 299 "../lex.l"
{return AFTER;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 300 "../lex.l"
{return CHANGE;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 301 "../lex.l"
{return INDEX;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 302 "../lex.l"
{return ON;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 303 "../lex.l"
{return UNIQUE;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 304 "../lex.l"
{return PRIMARY;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 305 "../lex.l"
{return KEY;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 306 "../lex.l"
{return TEMPORARY;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 307 "../lex.l"
{return AUTO_INCREMENT;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 308 "../lex.l"
{return IN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 310 "../lex.l"
{return IGNORE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 311 "../lex.l"
{return DUPLICATE;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 312 "../lex.l"
{return WHEN;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 313 "../lex.l"
{return END;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 314 "../lex.l"
{return AS;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 315 "../lex.l"
{return ELSE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 316 "../lex.l"
{return CONSTRAIN;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 317 "../lex.l"
{return FOREIGN;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 318 "../lex.l"
{return REFERENCES;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 319 "../lex.l"
{return CASCADE;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 320 "../lex.l"
{return GRANT;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 321 "../lex.l"
{return PRIVILEGES;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 322 "../lex.l"
{return IDENTIFIED;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 323 "../lex.l"
{return WITH;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 324 "../lex.l"
{return OPTION;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 325 "../lex.l"
{return IF;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 326 "../lex.l"
{return EXISTS;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 327 "../lex.l"
{return RENAME;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 328 "../lex.l"
{return DESCRIBE;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 329 "../lex.l"
{return EXPLAIN;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 330 "../lex.l"
{return VIEW;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 331 "../lex.l"
{return FLUSH;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 332 "../lex.l"
{return FOR;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 333 "../lex.l"
{return REVOKE;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 334 "../lex.l"
{return OUTER;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 335 "../lex.l"
{return AT;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 339 "../lex.l"
{return L_BRACKET;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 340 "../lex.l"
{return R_BRACKET;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 342 "../lex.l"
{return COMMA;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 343 "../lex.l"
{return STAR;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 344 "../lex.l"
{return EQUAL;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 345 "../lex.l"
{return NOT_EQUAL;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 346 "../lex.l"
{return MORE;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 347 "../lex.l"
{return LESS;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 348 "../lex.l"
{return MORE_EQUAL;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 349 "../lex.l"
{return LESS_EQUAL;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 350 "../lex.l"
{return L_MID_BRACKET;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 351 "../lex.l"
{return R_MID_BRACKET;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 352 "../lex.l"
{return XOR;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 353 "../lex.l"
{return ADD;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 354 "../lex.l"
{return DOLLAR;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 355 "../lex.l"
{return STICK;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 356 "../lex.l"
{return L_BIG_BRACKET;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 357 "../lex.l"
{return R_BIG_BRACKET;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 358 "../lex.l"
{return SUB;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 359 "../lex.l"
{return QUESTION_MARK;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 360 "../lex.l"
{return BACKSLASH;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 362 "../lex.l"
{return _BEGIN_;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 363 "../lex.l"
{return START;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 364 "../lex.l"
{return TRANSACTION;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 365 "../lex.l"
{return COMMIT;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 366 "../lex.l"
{return WORK;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 367 "../lex.l"
{return ROLLBACK;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 368 "../lex.l"
{return SAVEPOINT;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 369 "../lex.l"
{return RELEASE;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 370 "../lex.l"
{return READ;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 371 "../lex.l"
{return UNCOMMITTED;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 372 "../lex.l"
{return COMMITTED;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 373 "../lex.l"
{return REPEATABLE;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 374 "../lex.l"
{return SERIALIZABLE;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 375 "../lex.l"
{return AUTOCOMMIT;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 376 "../lex.l"
{return DIV;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 377 "../lex.l"
{return MOD;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 378 "../lex.l"
{return BETWEEN;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 379 "../lex.l"
{return REGEXP;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 380 "../lex.l"
{return RLIKE;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 381 "../lex.l"
{return L_MOVE;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 382 "../lex.l"
{return R_MOVE;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 383 "../lex.l"
{return THEN;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 384 "../lex.l"
{return CASE;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 385 "../lex.l"
{return SEMICOLON;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 386 "../lex.l"
{return NUMBER;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 387 "../lex.l"
{return FUNCTION;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 388 "../lex.l"
{return TAB_DOT_COL;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 389 "../lex.l"
{return ID;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 391 "../lex.l"
{return OTHER;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 393 "../lex.l"
ECHO;
	YY_BREAK
#line 2438 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 594 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 594 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 593);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 393 "../lex.l"


