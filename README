//使用方法
1.编译CJsonObject
	cd utils/CJsonObject
	mkdir build
	cd build
	cmake .. && make

2.编译sql_parser
	cd utils/sql_parser
	mkdir build
	cd build
	cmake .. && make

3.编译防火墙
	mkdir build
	cd build
	cmake .. && make

4.使用
	初始化数据库
		db_FireWall init
	运行防火墙
		db_FIreWall

配置文件
	/etc/db_FireWall/db_FireWall.json
        #数据库服务器端口
        "server_port":3306,
        #防火墙端口
        "firewall_port":6666,
        #与ui通信的端口
        "ui_comm_port":6667,
        #是否开启学习模式0不开启，1开启
        "is_learning":1,
        #输出的等级 0[debug] 2[high_debug] 4[info] 5[warning] 9[error]
        "LOG_LEVEL":0,
        #数据库用户名(设置为null可在启动防火墙时输入，不可删除)
        "db_user":"root",
        #数据库密码(设置为null可在启动防火墙时输入，不可删除)
        "db_password":"123456",
        #存储防火墙信息的数据库名
        "db_name":"LL_firewall"
        #超时设置,当客户端超过time_out秒没有操作,防火墙会断掉连接,单位是秒
        "time_out":60
        #监听队列大小
        "listen_queue_size":1024
        #默认生效等级
        "default_level":0



v2.0
	修改所有代码结构，改为cmake编译
v2.1
	1.修复bug，过滤时ip通配和user通配问题,优化过滤模式,之前要黑白名单查询8次，现在只需要1次
	2.修改表结构
		white_list
			create table if not exists white_list (
			id int not null auto_increment primary key,
			user varchar(30) not null,
			sql_cmd varchar(2048) not null,
			rule varchar(2048) not null,
			level int not null,
			addr_ip varchar(30) not null,
			flag int not null,
			index(rule(512)),
			index(sql_cmd(512)));
		插入
			insert into white_list(user, sql_cmd, rule, level, addr_ip, flag) 
			select \"%s\",\"%s\",\"%s\",%d,\"%s\",%d 
			from white_list 
			where not exists(select user, sql_cmd, addr_ip 
			from white_list 
			where user=\"%s\" and sql_cmd=\"%s\" and addr_ip=\"%s\");

		illegal_list
			create table if not exists illegal_query(
			id int not null auto_increment primary key,
			user varchar(30) not null, 
			query_sql varchar(2048) not null, 
			addr_ip varchar(30) not null, 
			query_time datetime not null default now());
v2.2
	1.添加名单时，设置默认值，在配置文件里面的default_level里面设置
	2.修改配置文件里面的密码，需要在启动防火墙时输入密码或者用户,增加测试密码是否正确功能
	3.在filter里面添加init功能，直接初始化数据库，不用其他脚本
	4.调整naive_sql_parser的level等级从1/2/3/4变成0/1/2/3

v2.3
	修复service脚本启动时的重定向输入问题，输入密码的问题

v2.3.1
	修复静态编译生成的可执行文件，一开启新线程就段错误

v2.3.2
	添加了界面和防火墙的通信功能
	添加安装功能

	



//客户端连接数据库时指定主机和端口号
//-h 		指定服务器主机
//-P(大写) 	指定服务器端口
//-u 		指定用户
//-p 		密码
mysql -h127.0.0.1 -P6666 -uroot -p


数据库表说明：
level
	123.过略等级
	4.ip是否通配
	5.user是否通配


flag
	1.是否白名单
	2.是否移除白名单
	3.是否黑名单
	4.是否移除黑名单
white_list | CREATE TABLE `white_list` (
  `user` varchar(30) NOT NULL,
  `sql_cmd` varchar(512) NOT NULL,
  `rule` varchar(512) NOT NULL,
  `level` int(5) NOT NULL,
  `addr_ip` varchar(30) NOT NULL,
  `flag` int(5) NOT NULL,
  PRIMARY KEY (`user`,`sql_cmd`,`level`,`addr_ip`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1

学习阶段每一条通过的sql语句会生成4条数据库的记录，其中这4条数据库记录的sql_cmd，user，addr_ip是一样的，这四条数据库记录代表4个不同等级过滤规则
level&7=1即1级表示只有和规则中sql语句完全一样才可以通过
level&7=2即2级表示规则sql中的一些参数可变，如select * from stu where sid = 1中的1就是可变的
level&7=3即3级表示规则sql中的列名可变，如select Sid from std中的Sid就可以改变
level&7=4即4级表示规则sql中的表名可变，如select Sid from std中的std就可变
低等级可过的高等级必定可过，如果不可过，说明代码写错了。。。。

其中level的第4，5位表示ip，user是否可以通配，即是否所有ip，user可过
在这4条数据库记录中，level的低三位是不同的而且是不变的，高位是不固定的。

flag用来表示该条规则是在黑名单还是在白名单中，
如果flag&1 = 1表示在白名单,flag&1 = 0表示不在白名单
falg&2 = 1表示在黑名单， flag&2 = 0表示不再黑名单
四条规则中同时只会有一条规则生效，其余三条的flag是0
生效的一条规则既可以在黑名单也可以在白名单，如果同时属于两个名单，黑名单优先，即优先不通过
新添加的规则4条记录都默认flag=0，也就是既不在白名单也不再黑名单里，这两者有重复问题，
所以无法辨别4条flag都位0的记录表示刚插入的规则还是已经被废弃掉的规则

两个解决方法：
第一个：
	0的作为新插入的，那么当一条规则被移除白/黑名单时，检测是否4条记录的flag都是0如果时，直接delete4条记录/flag第三位设置成1表示删除
	缺点：没有回收站，直接删除，无法恢复/暂时没想到太大的问题

第二个：
	0作为废弃规则，那么当一条规则插入时，设置一个默认的级别，使得新插入的规则有一条记录flag不为0
	缺点：无法查看新插入的规则

两个方法均未实现。


user 			该条规则对应的数据库用户
sql_cmd 		学习阶段学习到的sql语句
rule 			根据sql语句生成的规则
level 			低三位表示过滤等级，第4位表示ip是否通配，第5位表示user是否通配
addr_ip 		该条规则对应的ip
flag			用来表示该条规则是在黑名单还是在白名单中，第一位表示是否白名单，第二位表示是否在黑名单



illegal_query | CREATE TABLE `illegal_query` (
  `user` varchar(30) NOT NULL,
  `query_sql` varchar(512) NOT NULL,
  `addr_ip` varchar(30) NOT NULL,
  `query_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`user`,`query_sql`,`addr_ip`,`query_time`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1

每条记录表示一次非法请求
user 			表示请求的数据库用户
query_sql 		表示本次非法请求的sql语句
addr_ip 		表示本次非法请求的发送方的ip
query_time 		表示本次非法请求的时间


数据库表结构非常烂。。。。大量冗余，浪费空间。结构差劲，浪费时间。





















//待解决
1.过滤策略(待优化)
2.大数据包通信问题(多数据包)
3.网页登陆问题&&语言连接数据库(待检测)
4.并发问题(线程池)
5.数据库字段大小问题(pass)
6.登陆失败关闭连接






//(解决)修改sql语句，时用parse之后的语句作为标准语句，去除双引号


//不打算解决问题
11.USER，password关键字
12.函数当作col



//环境问题

1.重新编译sql_parser
2.创建数据库
2.修改db_comm里面的eof_cnt，高版本为1，低版本和navigation for mysql 为2




ui_comm协议
用来和web前端进行交互，监听6667端口
通信协议：
	客户端：
		前四个byte用来标志包大小，
		第五个byte用来标志包的类型：
		1表示切换模式
			第6个byte为1表示开为0表示，2表示查询，其他不处理
		2表示插入规则
			第6个byte表示等级，包括sql语句的过滤等级和user，ip是否通配低，其中三位表示过滤等级(level%8),第4位表示user是否通配，第5位表示ip是否通配
			第7个byte表示操作类型，第1位表示白(1)黑(0)名单，第2位表示加入(1)，删除(0)
			之后的byte表示sql语句
		其他待定
	服务器端：
		一个byte，0失败，1成功





level
	123.过略等级
	4.ip是否通配
	5.user是否通配


flag
	1.是否白名单
	2.是否黑名单


flag
	1.是否白名单
		1.移入白名单
			update white_list set flag=flag&2 where sql_cmd=sql;(全部移除白名单)
			update white_list set level=level, flag=flag|1 where sql_cmd=sql and level&7=level;
		2.移除白名单
			update white_list set flag=flag&2 where sql_cmd=sql;
	2.是否黑名单
		1.移入黑名单
			update white_list set flag=flag&1 where sql_cmd=sql;(全部移除黑名单)
			update white_list set level=level, flag=flag|2 where sql_cmd=sql and level&7=level;
		2.移除黑名单
			update white_list set flag=flag&1 where sql_cmd=sql;





过滤
	黑名单
		select count(*) from white_list where rule=\"%s\" and ((level&4) or addr_ip=\"%s\") and ((level&8) or user=\"%s\") and (flag&2);